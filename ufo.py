# -*- coding: utf-8 -*-
"""ufo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q9G4ETFq7dY6ZUltRTwl80lX-cy4vBFJ
"""

import pandas as pd

df = pd.read_csv('/content/drive/MyDrive/2025 - 2026/Independent Studies/Data Analysis/UFO/complete.csv')

from google.colab import drive
drive.mount('/content/drive')

df

df.shape

df.dtypes

print("\nBasic Dataset Statistics:")
print(df.describe())

print("\nMissing Values:")
print(df.isnull().sum())

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Example: Create a histogram of UFO sightings by state
plt.figure(figsize=(12, 6))
sns.countplot(data=df, x='state')
plt.title('UFO Sightings by State')
plt.xticks(rotation=90)
plt.show()

# Convert 'datetime' column to datetime objects with error handling
df['datetime'] = pd.to_datetime(df['datetime'], errors='coerce')

# Convert 'datetime' column to datetime object
df['datetime'] = pd.to_datetime(df['datetime'])

# Convert 'duration (seconds)' to numeric (assuming it contains numeric values)
df['duration (seconds)'] = pd.to_numeric(df['duration (seconds)'], errors='coerce')

# Filter for UFO sightings in the United States
us_ufo_df = df[df['country'] == 'us']

# Filter for sightings in a specific year (e.g., 2020)
ufo_2020_df = df[df['datetime'].dt.year == 2020]

print("UFO Sightings in the United States:")
print(us_ufo_df.head())

print("\nUFO Sightings in the Year 2020:")
print(ufo_2020_df.head())

# Group sightings by 'shape' and calculate the average duration
df.groupby('shape')['duration (seconds)'].mean().sort_values(ascending=False).reset_index()

# Extract the year from the 'datetime' column
df['year'] = df['datetime'].dt.year

# Plot the number of sightings per year
plt.figure(figsize=(12, 6))
sns.countplot(data=df, x='year')
plt.title('UFO Sightings Over Time')
plt.xticks(rotation=90)
plt.show()

# Import necessary libraries
import matplotlib.pyplot as plt
import pandas as pd

# Assuming you have already extracted the 'year' column from the 'datetime' column

# Group the data by year and count the number of sightings per year
yearly_counts = df['year'].value_counts().sort_index()

# Create a line plot
plt.figure(figsize=(12, 6))
plt.plot(yearly_counts.index, yearly_counts.values, marker='o', linestyle='-')
plt.title('UFO Sightings Over Time')
plt.xlabel('Year')
plt.ylabel('Number of Sightings')
plt.grid(True)
plt.xticks(rotation=90)
plt.show()

# Word cloud for comments
from wordcloud import WordCloud

comment_text = ' '.join(df['comments'].dropna())
wordcloud = WordCloud(width=800, height=400).generate(comment_text)

plt.figure(figsize=(12, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Word Cloud of UFO Sightings Comments')
plt.show()

# Overview of UFO Sightings
total_sightings = len(df)
unique_countries = df['country'].nunique()
print(f"Total number of UFO sightings: {total_sightings}")
print(f"Number of unique countries with sightings: {unique_countries}")

# Distribution of Sightings by Country
country_counts = df['country'].value_counts()
plt.figure(figsize=(10, 6))
sns.barplot(x=country_counts.index, y=country_counts.values)
plt.xlabel('Country')
plt.ylabel('Number of Sightings')
plt.title('Distribution of UFO Sightings by Country')
plt.xticks(rotation=90)
plt.show()

# Distribution of UFO Shapes
shape_counts = df['shape'].value_counts()
plt.figure(figsize=(12, 6))
sns.barplot(x=shape_counts.values, y=shape_counts.index)
plt.xlabel('Number of Sightings')
plt.ylabel('UFO Shape')
plt.title('Distribution of UFO Shapes')
plt.xticks(rotation=90)
plt.show()

# Distribution of UFO Shapes
shape_counts = df['shape'].value_counts()
plt.figure(figsize=(12, 6))
sns.barplot(x=shape_counts.index, y=shape_counts.values)
plt.xlabel('UFO Shape')
plt.ylabel('Number of Sightings')
plt.title('Distribution of UFO Shapes')
plt.xticks(rotation=90)
plt.show()

"""analyzing the distribution of UFO sighting durations in more detail and performing a statistical hypothesis test to determine if there's a significant difference in sighting durations between two different shapes of UFOs: "light" and "triangle."
"""

import scipy.stats as stats

# Filter UFO sightings for the "light" and "triangle" shapes
light_cross_df = df[(df['shape'] == 'light') | (df['shape'] == 'cross')]

# Remove rows with missing duration values
light_cross_df = light_cross_df.dropna(subset=['duration (seconds)'])

# Plot histograms for the duration of "light" and "triangle" sightings
plt.figure(figsize=(12, 6))
sns.histplot(light_cross_df[light_cross_df['shape'] == 'light']['duration (seconds)'],
             bins=50, label='Light', color='blue', alpha=0.5)
sns.histplot(light_cross_df[light_cross_df['shape'] == 'cross']['duration (seconds)'],
             bins=50, label='Cross', color='red', alpha=0.5)
plt.xlabel('Duration (seconds)')
plt.ylabel('Frequency')
plt.title('Distribution of UFO Sighting Durations for "Light" and "Cross" Shapes')
plt.legend()
plt.show()

# Perform a t-test to compare the mean duration of "light" and "cross" sightings
light_durations = light_cross_df[light_cross_df['shape'] == 'light']['duration (seconds)']
cross_durations = light_cross_df[light_cross_df['shape'] == 'cross']['duration (seconds)']

t_statistic, p_value = stats.ttest_ind(light_durations, cross_durations, equal_var=False)
print(f"t-statistic: {t_statistic:.2f}")
print(f"P-value: {p_value:.4f}")

# Interpret the results of the t-test
alpha = 0.05
if p_value < alpha:
    print("Reject the null hypothesis: There is a significant difference in sighting durations.")
else:
    print("Fail to reject the null hypothesis: There is no significant difference in sighting durations.")