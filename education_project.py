# -*- coding: utf-8 -*-
"""Education_Final_Project (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kcd-Ux104glpgsHJTZ7MfvPSqZPjQaDv
"""

import pandas as pd

covid = pd.read_csv('/content/drive/MyDrive/Applied Data Science/responses.csv')

performance=pd.read_csv('/content/drive/MyDrive/Applied Data Science/student-por.csv')

covid

performance

performance.rename(columns = {'age' : 'Age'}, inplace = True)

performance

performance = performance.join(covid.set_index('Age'), on = 'Age')

performance

performance.drop(columns = ['school','Gender','Category','Before-Environment','Country','FamilyRelationships','famsize', 'reason','guardian','traveltime','studytime','failures','schoolsup','famsup','paid','activities','nursery','higher','internet','romantic','famrel','freetime','goout','Dalc','Walc','health','absences','G1','G2','G3'],inplace=True)

performance

performance['Increased Stress'] = ((performance['Now-HomeworkStress']-performance['Before-HomeworkStress'])+(performance['Now-ClassworkStress']-performance['Before-ClassworkStress']))/2

performance

performance.groupby('Now-Environment')['Increased Stress'].mean()

performance.sort_values('Increased Stress',ascending=False).count()

performance.groupby('State')['Increased Stress'].describe().loc[:,['max','min','mean']]

performance.groupby('Mjob')['Increased Stress'].mean().sort_values(ascending=False)

performance.groupby('Fjob')['Increased Stress'].mean().sort_values(ascending=False)

performance.groupby('State')['Now-Environment'].value_counts().sort_values(ascending=False)

performance.groupby('State')['Increased Stress'].count().mean()

performance.groupby('State')['Increased Stress'].mean().sort_values(ascending=False).plot.barh(stacked=True);

performance.sort_values('Medu',ascending=False).drop_duplicates('Medu').loc[:,['Medu','Increased Stress']]

performance.sort_values('Medu',ascending=False).drop_duplicates('Medu').loc[:,['Medu','Increased Stress']].plot.barh(x='Increased Stress',y='Medu')

performance[(performance['sex']=='F')&(performance['address']=='R')].groupby('State')['Increased Stress'].mean().sort_values(ascending=False)

performance[(performance['sex']=='F')&(performance['address']=='U')].groupby('State')['Increased Stress'].mean().sort_values(ascending=False)

performance[(performance['sex']=='M')&(performance['address']=='R')].groupby('State')['Increased Stress'].mean().sort_values(ascending=False)

performance[(performance['sex']=='M')&(performance['address']=='U')].groupby('State')['Increased Stress'].mean().sort_values(ascending=False)

performance.groupby('sex')['FriendRelationships'].mean().sort_values(ascending=False)

performance.groupby('Fjob')['FriendRelationships'].mean().sort_values(ascending=False)

performance.groupby('Mjob')['FriendRelationships'].mean().sort_values(ascending=False)

performance.groupby('Now-Environment')['FriendRelationships'].mean().head().plot(kind='bar', ylabel = 'FriendRelationships ', title = 'Impact On Friendships')

import seaborn as sns
sns.set_theme(style="whitegrid")

penguins = sns.load_dataset("penguins")

# Draw a nested barplot by species and sex
g = sns.catplot(
    data=performance, kind="bar",
    x="Now-Environment", y="FriendRelationships", hue="sex",
     palette="dark", alpha=.6, height=6
)
g.despine(left=True)
g.set_axis_labels("Environment", "Friendships")
g.legend.set_title("")

import seaborn as sns
sns.set_theme(style="whitegrid")

penguins = sns.load_dataset("penguins")

# Draw a nested barplot by species and sex
g = sns.catplot(
    data=performance, kind="bar",
    x="Now-Environment", y="FriendRelationships", hue="Age",
     palette="dark", alpha=.6, height=6
)
g.despine(left=True)
g.set_axis_labels("Environment", "Friendships")
g.legend.set_title("")

